>global objeccts

console.log, where connsole is a global object.

setTimeout()
resetTimeout()

for a better practise, we should not define object in a global scope, because when node engine encounters more than one definition of same function/object.
It overwrites the latest one, thereby loosing the sense for having two different objects with same name in global scope.
Hence if scope has to be kept global the code-owners will have to make sure they don't redefine the same thing again in the code somewhere.


>modules
every file in a node app, is considered a module.

every node app has atleast one main file, which is referred as The main module.
Again, in node very file is called a module and every var/func defined inside that module are scoped in to tht module only. And they are not available outside the module.



>loading a module
const mod= require('./logger.js') OR
const mod= require('./logger')

>jshint app.js
assists in finding what semantically doesn't fir together.


> const ,
any over-write of this kind of variable, result in error on compile time instead of run time.

> module wrapper function